[
    {
        "id": "8474e5b5cc14f404",
        "type": "tab",
        "label": "EAS Attestation Flow",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b5de5b0e9fe658a9",
        "type": "inject",
        "z": "8474e5b5cc14f404",
        "name": "Inputs: RpcUrl, Registry address,Eas address, Private key",
        "props": [
            {
                "p": "rpcUrl",
                "v": "JSON-RPC-URL/API-KEY",
                "vt": "str"
            },
            {
                "p": "registryAddress",
                "v": "SCHEMA-REGISTRY-ADDRESS",
                "vt": "str"
            },
            {
                "p": "easAddress",
                "v": "EAS-ADDRESS",
                "vt": "str"
            },
            {
                "p": "privateKey",
                "v": "PRIVATE-KEY",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 250,
        "y": 120,
        "wires": [
            [
                "39dea331a58511f0"
            ]
        ]
    },
    {
        "id": "39dea331a58511f0",
        "type": "function",
        "z": "8474e5b5cc14f404",
        "name": "Setup Global Variables",
        "func": "// Initialize provider with specific network parameters\nconst provider = new ethers.providers.JsonRpcProvider(msg.rpcUrl)\n\nconst signer = new ethers.Wallet(msg.privateKey, provider);\n\n// Initialize EAS with specific gas settings\nconst eas = new eassdk.EAS(msg.easAddress);\neas.connect(signer);\n\n// Store in global context\nglobal.set('provider', provider);\nglobal.set('signer', signer);\nglobal.set('eas', eas);\nglobal.set('registryAddress', msg.registryAddress);\n\nmsg.payload = 'EAS Configuration Initialized';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "ethers",
                "module": "ethers"
            },
            {
                "var": "eassdk",
                "module": "@ethereum-attestation-service/eas-sdk"
            }
        ],
        "x": 580,
        "y": 120,
        "wires": [
            [
                "cb58954d4a5d31be"
            ]
        ]
    },
    {
        "id": "54239005c465d160",
        "type": "inject",
        "z": "8474e5b5cc14f404",
        "name": "Register Schema",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 120,
        "y": 260,
        "wires": [
            [
                "d0c4f0a17eac8d9a"
            ]
        ]
    },
    {
        "id": "1ab06e9932517d6c",
        "type": "inject",
        "z": "8474e5b5cc14f404",
        "name": "Input: Schema uid",
        "props": [
            {
                "p": "schemaUID",
                "v": "SCHEMA-UID",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 130,
        "y": 400,
        "wires": [
            [
                "fadab64147ee8f6e"
            ]
        ]
    },
    {
        "id": "fadab64147ee8f6e",
        "type": "function",
        "z": "8474e5b5cc14f404",
        "name": "Create Attestation",
        "func": "// Get global variables\nconst eas = global.get('eas');\nconst schemaUID = msg.schemaUID;\n\n// Create an encoder that matches our schema structure\nconst schemaEncoder = new eassdk.SchemaEncoder(\"string name, string platform, string handle\");\n\n// The actual data we want to attest to\nconst attestationData = [\n    { name: \"name\", value: \"awesome_developer\", type: \"string\" },\n    { name: \"platform\", value: \"GitHub\", type: \"string\" },\n    { name: \"handle\", value: \"@devmaster\", type: \"string\" }\n];\n\ntry {\n    // Convert our data into the format EAS expects\n    const encodedData = schemaEncoder.encodeData(attestationData);\n\n    // Create the attestation with zero gas price\n    const tx = await eas.attest(\n        {\n            schema: schemaUID,\n            data: {\n                recipient: \"0x0000000000000000000000000000000000000000\",  // Public attestation\n                expirationTime: 0,              // Never expires\n                revocable: true,                // Can be revoked later if needed\n                data: encodedData              // Our encoded attestation data\n            }\n        },\n        { gasPrice: 0 } // Explicitly set gas price to 0\n    );\n\n    // Wait for confirmation and get the result\n    const receipt = await tx.wait();\n\n    // Store attestation UID for later verification\n    global.set('attestationUID', receipt.attestationUID);\n\n    msg.payload = {\n        success: true,\n        attestationUID: receipt,\n        message: \"Attestation created successfully with zero gas fees!\"\n    };\n} catch (error) {\n    msg.payload = {\n        success: false,\n        error: error.message\n    };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "eassdk",
                "module": "@ethereum-attestation-service/eas-sdk"
            },
            {
                "var": "ethers",
                "module": "ethers"
            }
        ],
        "x": 330,
        "y": 400,
        "wires": [
            [
                "48062e9acdae5ba9"
            ]
        ]
    },
    {
        "id": "2b94d8c4fc6af962",
        "type": "inject",
        "z": "8474e5b5cc14f404",
        "name": "Input: Attestation UID",
        "props": [
            {
                "p": "attestationUID",
                "v": "ATTESTATION-UID",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 140,
        "y": 540,
        "wires": [
            [
                "e6fe11859b59a987"
            ]
        ]
    },
    {
        "id": "e6fe11859b59a987",
        "type": "function",
        "z": "8474e5b5cc14f404",
        "name": "Verify Attestation",
        "func": "const eas = global.get('eas'); // Retrieve EAS instance from global context\nconst attestationUID = msg.attestationUID; // Retrieve attestation UID from message\n\ntry {\n    // Fetch attestation details using the provided UID\n    const attestation = await eas.getAttestation(attestationUID);\n\n    // Use schema structure consistent with other parts of the project\n    const schemaEncoder = new eassdk.SchemaEncoder(\"string name, string platform, string handle\");\n    const decodedData = schemaEncoder.decodeData(attestation.data);\n\n    // Extract and parse the data fields\n    const name = decodedData[0].value;\n    const platform = decodedData[1].value;\n    const handle = decodedData[2].value;\n\n    msg.payload = {\n        success: true,\n        isValid: !attestation.revoked,\n        attestation: {\n            attester: attestation.attester,\n            time: new Date(Number(attestation.time) * 1000).toLocaleString(),\n            expirationTime: attestation.expirationTime > 0 \n                ? new Date(Number(attestation.expirationTime) * 1000).toLocaleString()\n                : 'Never',\n            revoked: attestation.revoked\n        },\n        data: {\n            name: typeof name === 'object' ? JSON.stringify(name) : name.toString(),\n            platform: typeof platform === 'object' ? JSON.stringify(platform) : platform.toString(),\n            handle: typeof handle === 'object' ? JSON.stringify(handle) : handle.toString()\n        }\n    };\n} catch (error) {\n    // Handle errors and return detailed information\n    msg.payload = { \n        success: false, \n        error: error.message,\n        details: JSON.stringify(error, Object.getOwnPropertyNames(error))\n    };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "eassdk",
                "module": "@ethereum-attestation-service/eas-sdk"
            },
            {
                "var": "ethers",
                "module": "ethers"
            }
        ],
        "x": 350,
        "y": 540,
        "wires": [
            [
                "2c49fdc3d5cc7a89"
            ]
        ]
    },
    {
        "id": "cb58954d4a5d31be",
        "type": "debug",
        "z": "8474e5b5cc14f404",
        "name": "Setup Result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 770,
        "y": 120,
        "wires": []
    },
    {
        "id": "6a00ee8af4429403",
        "type": "debug",
        "z": "8474e5b5cc14f404",
        "name": "Register Result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 500,
        "y": 260,
        "wires": []
    },
    {
        "id": "48062e9acdae5ba9",
        "type": "debug",
        "z": "8474e5b5cc14f404",
        "name": "Create Result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 520,
        "y": 400,
        "wires": []
    },
    {
        "id": "2c49fdc3d5cc7a89",
        "type": "debug",
        "z": "8474e5b5cc14f404",
        "name": "Verify Result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 530,
        "y": 540,
        "wires": []
    },
    {
        "id": "099fe4e473e4eb12",
        "type": "comment",
        "z": "8474e5b5cc14f404",
        "name": "Initialize EAS Config",
        "info": "",
        "x": 110,
        "y": 60,
        "wires": []
    },
    {
        "id": "3562025b039d034b",
        "type": "comment",
        "z": "8474e5b5cc14f404",
        "name": "Register a new schema",
        "info": "/* SCHEMA GUIDE\nEdit the schema variable to define your attestation fields.\nFormat: \"type name, type name, type name\"\n\nAvailable Types:\n- string (text)\n- bool (true/false)\n- address (wallet address)\n- uint256 (number)\n- bytes32 (hash)\n\nExamples:\n\"string name, string email, bool isVerified\"\n\"string twitter, address wallet, uint256 age\"\n\"string discord, string github, string telegram\"\n*/\n\nconst schema = \"string pshandle, string socialMedia, string socialMediaHandle\";",
        "x": 120,
        "y": 200,
        "wires": []
    },
    {
        "id": "00c862ccfbb35d61",
        "type": "comment",
        "z": "8474e5b5cc14f404",
        "name": "Create Attestation",
        "info": "",
        "x": 110,
        "y": 340,
        "wires": []
    },
    {
        "id": "ebd77c05f852e862",
        "type": "comment",
        "z": "8474e5b5cc14f404",
        "name": "Verify Attestation",
        "info": "",
        "x": 110,
        "y": 480,
        "wires": []
    },
    {
        "id": "d0c4f0a17eac8d9a",
        "type": "function",
        "z": "8474e5b5cc14f404",
        "name": "Register Schema",
        "func": "// Get global variables set in init\nconst signer = global.get('signer');\nconst registryAddress = global.get('registryAddress');\n\n// Initialize SchemaRegistry contract\nconst schemaRegistry = new ethers.Contract(\n    registryAddress,\n    [\n        \"event Registered(bytes32 indexed uid, address indexed owner, string schema, address resolver, bool revocable)\",\n        \"function register(string calldata schema, address resolver, bool revocable) external returns (bytes32)\"\n    ],\n    signer\n);\n\n// Define what data fields our attestations will contain\nconst schema = \"string name, string platform, string handle\";\nconst resolverAddress = \"0x0000000000000000000000000000000000000000\";  // No special validation needed\nconst revocable = true;  // Attestations can be revoked if needed\n\ntry {\n    const tx = await schemaRegistry.register(schema, resolverAddress, revocable, { gasPrice: 0 });\n    const receipt = await tx.wait();\n\n    const schemaUID = receipt.logs[0].topics[1];\n    // Store schemaUID in global context for later use\n    global.set('schemaUID', schemaUID);\n\n    msg.payload = {\n        success: true,\n        schemaUID: schemaUID,\n        message: \"Schema registered successfully!\"\n    };\n} catch (error) {\n    msg.payload = {\n        success: false,\n        error: error.message\n    };\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "ethers",
                "module": "ethers"
            }
        ],
        "x": 310,
        "y": 260,
        "wires": [
            [
                "6a00ee8af4429403"
            ]
        ]
    }
]
